{"version":3,"sources":["components/Post.js","services/posts.js","App.js","reportWebVitals.js","index.js"],"names":["Post","post","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","id","newObject","put","App","props","useState","posts","setPosts","newPost","setNewPost","showAll","setShowAll","useEffect","postService","initialPosts","postsToShow","filter","note","map","find","n","changedPost","returnedPost","toggleImportanceOf","onSubmit","event","preventDefault","postObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAqB,iBACzB,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCPpCI,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EALA,SAACC,EAAIC,GAElB,OADgBN,IAAMO,IAAN,UAAaR,EAAb,YAAwBM,GAAMC,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAG5B,EAVA,SAAAE,GAEb,OADgBN,IAAMP,KAAKM,EAASO,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC6E5BI,EAjFH,SAACC,GACX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,IAAqBhB,MAAK,SAAAiB,GACxBP,EAASO,QAGV,IAEH,IAwBMC,EAAcL,EAClBJ,EACAA,EAAMU,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,aAe5B,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMkB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYG,KAAI,SAAA9B,GAAI,OACjB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBA1BH,SAACW,GAE1B,IAAMZ,EAAQkB,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,KACjCqB,EAAW,2BAAOjC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CsB,EACUb,EAAIqB,GACXxB,MAAK,SAAAyB,GACJf,EAASD,EAAMY,KAAI,SAAAE,GAAC,OAAIA,EAAEpB,KAAOA,EAAKoB,EAAIE,SAkBZC,CAAmBnC,EAAKY,MAF3CZ,EAAKY,SAMlB,uBAAMwB,SA1DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnC,QAASgB,EACToB,MAAM,IAAIC,MAAOC,cACjBvC,UAAWwC,KAAKC,SAAW,GAC3BhC,GAAIM,EAAM2B,OAAS,GAGrBpB,EACQc,GACP9B,MAAK,SAAAyB,GACJf,EAASD,EAAM4B,OAAOZ,IACtBb,EAAW,QA6CX,UACE,uBACE0B,MAAO3B,EACP4B,SA1CiB,SAACX,GACxBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB1B,EAAWgB,EAAMc,OAAOJ,UA0CpB,wBAAQK,KAAK,SAAb,yBCrEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.77214a55.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Post = ({ post, toggleImportance }) => {\r\n  const label = post.important\r\n    ? 'make not important':'make important'\r\n  return (\r\n    <li>\r\n      {post.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Post","import axios from 'axios'\r\nconst baseUrl = '/api/posts'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    update,\r\n    create\r\n}","import React, { useState, useEffect } from 'react'\nimport Post from './components/Post'\nimport postService from './services/posts'\nimport axios from 'axios'\n\n\nconst App = (props) => {\n  const [posts, setPosts] = useState([])\n  const [newPost, setNewPost] = useState('')\n  const [showAll, setShowAll] = useState(false)\n\n  useEffect(() => {\n    postService.getAll().then(initialPosts =>{\n      setPosts(initialPosts)\n      }\n    )\n  }, [])  \n\n  const addPost = (event) => {\n    event.preventDefault()\n    const postObject = {\n      content: newPost,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: posts.length + 1,\n    }\n\n    postService\n    .create(postObject)\n    .then(returnedPost => {\n      setPosts(posts.concat(returnedPost))\n      setNewPost('')\n    })\n\n\n  }\n\n  const handlePostChange = (event) => {\n    console.log(event.target.value)\n    setNewPost(event.target.value)\n  }\n\n  const postsToShow = showAll\n  ? posts\n  : posts.filter(note => note.important)\n\n  const toggleImportanceOf = (id) => {\n\n    const post =  posts.find(n => n.id === id)\n    const changedPost = {...post, important: !post.important}\n\n    postService\n      .update(id, changedPost)\n      .then(returnedPost => {\n        setPosts(posts.map(n => n.id !== id ? n : returnedPost))\n    })\n\n  }\n\n  return (\n    <div>\n      <h1>posts</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>   \n      <ul>\n        {postsToShow.map(post => \n            <Post \n              key={post.id}\n              post={post}\n              toggleImportance={() => toggleImportanceOf(post.id)} \n            />\n        )}\n      </ul>\n      <form onSubmit={addPost}>\n        <input\n          value={newPost}\n          onChange={handlePostChange}\n        />\n        <button type=\"submit\">Post</button>\n      </form>  \n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}